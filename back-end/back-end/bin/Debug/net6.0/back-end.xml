<?xml version="1.0"?>
<doc>
    <assembly>
        <name>back-end</name>
    </assembly>
    <members>
        <member name="M:back_end.Controllers.BackgroundImagesController.GetAllImages">
             <summary>
             Gets all of the backgroundImages regardless of category
             </summary>
             <remarks>
             Sample request:
            
                  /GetAllImages
                 {
                    "id": "5ce37619a9e07c300c1e6a7d",
                    "category": "Nature",
                    "backgroundImages": [1,2],
                    "cloudinaryRP": "/relative_path"
                 }
            
             </remarks>
             <response code="201">Returns the newly created item</response>
             <response code="400">If the item is null</response>       
        </member>
        <member name="M:back_end.Controllers.BackgroundImagesController.GetImagesFromCategory(System.String)">
             <summary>
             Gets all of the backgroundImages based on category Id
             </summary>
             <remarks>
             Sample request:
            
                  /GetImagesFromCategory/{Id}
                 {
                    "id": "5ce37619a9e07c300c1e6a7d",
                    "category": "Nature",
                    "backgroundImages": [1,2],
                    "cloudinaryRP": "/relative_path"
                 }
            
             </remarks>
             <response code="201">Returns the newly created item</response>
             <response code="400">If the item is null</response>       
        </member>
        <member name="M:back_end.Controllers.BackgroundImagesController.CreateNewCategory(System.String,System.Collections.Generic.List{System.Int32},System.String)">
             <summary>
             Create a new category of images
             </summary>
             <remarks>
             Sample request:
            
                  /CreateNewCategory
                 {
                    "id": "5cea58888578a12e180e9703",
                    "category": "Wildlife",
                    "backgroundImages": [1,2],
                    "cloudinaryRP": "./."
                 }
            
             </remarks>
             <response code="201">Returns the newly created item</response>
             <response code="400">If the item is null</response>       
        </member>
        <member name="M:back_end.Controllers.LiveRoomController.CheckLockedRoom(System.String,System.String)">
             <summary>
             Check if locked room exists
             </summary>
             <remarks>
             Sample request:
            
                  /CheckLockedRoom
                 {
                    "id": "62979eb0c19fd38c79cdb3b8",
                    "userId": "62979eb0c19fd38c79cdb3b8",
                    "roomId": "123"
                    "password": "pwd"
                 }
            
             </remarks>
             <response code="201">Returns the newly created item</response>
             <response code="400">If the item is null</response>       
        </member>
        <member name="M:back_end.Controllers.LiveRoomController.CheckRoomIdAvailable(System.String)">
             <summary>
             Check if locked room exists by roomId
             </summary>
             <remarks>
             Sample request:
            
                  /CheckRoomIdAvailable
                 {
                    "id": "62979eb0c19fd38c79cdb3b8",
                    "userId": "62979eb0c19fd38c79cdb3b8",
                    "roomId": "123"
                    "password": "pwd"
                 }
            
             </remarks>
             <response code="201">Returns the newly created item</response>
             <response code="400">If the item is null</response>       
        </member>
        <member name="M:back_end.Controllers.LiveRoomController.CheckRoomBySocketId(System.String)">
             <summary>
             Check if locked room exists by socketId
             </summary>
             <remarks>
             Sample request:
            
                  /CheckRoomBySocketId
                 {
                    "id": "62979eb0c19fd38c79cdb3b8",
                    "userId": "62979eb0c19fd38c79cdb3b8",
                    "roomId": "123"
                    "password": "pwd"
                 }
            
             </remarks>
             <response code="201">Returns the newly created item</response>
             <response code="400">If the item is null</response>       
        </member>
        <member name="M:back_end.Controllers.LiveRoomController.CreateNewLockedRoom(System.String,System.String,System.String)">
             <summary>
             Create a new locked room
             </summary>
             <remarks>
             Sample request:
            
                  /CreateNewLockedRoom
                 {
                    "id": "62979eb0c19fd38c79cdb3b8",
                    "userId": "62979eb0c19fd38c79cdb3b8",
                    "roomId": "123"
                    "password": "pwd"
                 }
            
             </remarks>
             <response code="201">Returns the newly created item</response>
             <response code="400">If the item is null</response>       
        </member>
        <member name="M:back_end.Controllers.LiveRoomController.DeleteSocketHost(System.String)">
             <summary>
             delete socket host from the server
             </summary>
             <remarks>
             Sample request:
            
                  /DeleteSocketHost
                 {
                    "id": "62979eb0c19fd38c79cdb3b8",
                    "userId": "62979eb0c19fd38c79cdb3b8",
                    "roomId": "123"
                    "password": "pwd"
                 }
            
             </remarks>
             <response code="201">Returns the newly created item</response>
             <response code="400">If the item is null</response>       
        </member>
        <member name="M:back_end.Controllers.VideosController.GetAllVideos">
             <summary>
             Gets all of the videos regardless of category
             </summary>
             <remarks>
             Sample request:
            
                  /GetAllVideos
                 {
                    "id": "62979eb0c19fd38c79cdb3b8",
                    "category": "Wildlife",
                    "videoList": ["HjvIAJMbXi4","anotherYoutubeVideoId"],     
                 }
            
             </remarks>
             <response code="201">Returns the newly created item</response>
             <response code="400">If the item is null</response>       
        </member>
        <member name="M:back_end.Controllers.VideosController.GetRandomVideo">
             <summary>
             Gets a random video regardless of category
             </summary>
             <remarks>
             Sample request:
            
                  /GetRandomVideo
                 {
                    "id": "62979eb0c19fd38c79cdb3b8",
                    "category": "Wildlife",
                    "videoList": ["HjvIAJMbXi4","anotherYoutubeVideoId"],     
                 }
                 {
                    "id": "123124523124123452341",
                    "category": "Space",
                    "videoList": ["HjvIAJMbXi4","anotherYoutubeVideoId"],     
                 }
            
             </remarks>
             <response code="201">Returns the newly created item</response>
             <response code="400">If the item is null</response>       
        </member>
        <member name="M:back_end.Controllers.VideosController.GetVideosFromCategoryId(System.String)">
             <summary>
             Gets all of the videos based on category id
             </summary>
             <remarks>
             Sample request:
            
                  /GetVideosFromCategoryId/{id}
                 {
                    "id": "62979eb0c19fd38c79cdb3b8",
                    "category": "Wildlife",
                    "videoList": ["HjvIAJMbXi4","anotherYoutubeVideoId"],     
                 }
            
             </remarks>
             <response code="201">Returns the newly created item</response>
             <response code="400">If the item is null</response>       
        </member>
        <member name="M:back_end.Controllers.VideosController.GetVideosFromCategory(System.String)">
             <summary>
             Gets all of the videos based on category type eg. "Wildlife"
             </summary>
             <remarks>
             Sample request:
            
                  /GetVideosFromCategory/{category}
                 {
                    "id": "62979eb0c19fd38c79cdb3b8",
                    "category": "Wildlife",
                    "videoList": ["HjvIAJMbXi4","anotherYoutubeVideoId"],     
                 }
            
             </remarks>
             <response code="201">Returns the newly created item</response>
             <response code="400">If the item is null</response>       
        </member>
        <member name="M:back_end.Controllers.VideosController.GetRandomVideoFromCategory(System.String)">
             <summary>
             Gets a random video id based on category type eg. "Wildlife"
             </summary>
             <remarks>
             Sample request:
            
                  /GetRandomVideoFromCategory/{category}
                 {
                    "id": "62979eb0c19fd38c79cdb3b8",
                    "category": "Wildlife",
                    "videoList": ["HjvIAJMbXi4","anotherYoutubeVideoId"],     
                 }
            
             </remarks>
             <response code="201">Returns the newly created item</response>
             <response code="400">If the item is null</response>       
        </member>
        <member name="M:back_end.Controllers.VideosController.CreateNewVideoCategory(System.String,System.Collections.Generic.List{System.String})">
             <summary>
             Create a new category of videos.
             Please note that the video list contains "youtube video ids"
             </summary>
             <remarks>
             Sample request:
            
                  /CreateNewVideoCategory
                 {
                    "id": "62979eb0c19fd38c79cdb3b8",
                    "category": "Wildlife",
                    "videoList": ["HjvIAJMbXi4","anotherYoutubeVideoId"],     
                 }
            
             </remarks>
             <response code="201">Returns the newly created item</response>
             <response code="400">If the item is null</response>       
        </member>
        <member name="M:back_end.Controllers.VideosController.UpdateVideosFromCategory(System.String,System.Collections.Generic.List{System.String})">
             <summary>
             update videos from a particular category based on category type.
             Please note that the video list contains "youtube video ids"
             </summary>
             <remarks>
             Sample request:
            
                  /UpdateVideosFromCategory
                 {
                    "id": "62979eb0c19fd38c79cdb3b8",
                    "category": "Wildlife",
                    "videoList": ["HjvIAJMbXi4","anotherYoutubeVideoId","anotherVideoId"],     
                 }
            
             </remarks>
             <response code="201">Returns the newly created item</response>
             <response code="400">If the item is null</response>       
        </member>
        <member name="M:back_end.Controllers.VideosController.AddVideosFromCategory(System.String,System.Collections.Generic.List{System.String})">
             <summary>
             add more videos to an exisiting video category.
             Please note that the video list contains "youtube video ids"
             </summary>
             <remarks>
             Sample request:
            
                  /AddVideosFromCategory
                 {
                    "id": "62979eb0c19fd38c79cdb3b8",
                    "category": "Wildlife",
                    "videoList": ["anotherYoutubeVideoId","anotherVideoId"],     
                 }
            
             </remarks>
             <response code="201">Returns the newly created item</response>
             <response code="400">If the item is null</response>       
        </member>
        <member name="M:back_end.Controllers.VideosController.AddVideoFromCategory(System.String,System.String)">
             <summary>
             add a video exisiting video category.
             Please note that the video list contains "youtube video ids"
             </summary>
             <remarks>
             Sample request:
            
                  /AddVideoFromCategory
                 {
                    "id": "62979eb0c19fd38c79cdb3b8",
                    "category": "Wildlife",
                    "videoList": ["anotherVideoId"],     
                 }
            
             </remarks>
             <response code="201">Returns the newly created item</response>
             <response code="400">If the item is null</response>       
        </member>
        <member name="M:back_end.Controllers.VideosController.DeleteAllVideosFromCategory(System.String)">
             <summary>
             delete ALL videos from an exisiting category!
             Please note that the video list contains "youtube video ids"
             </summary>
             <remarks>
             Sample request:
            
                  /DeleteAllVideosFromCategory
                 {
                    "id": "62979eb0c19fd38c79cdb3b8",
                    "category": "Wildlife",
                    "videoList": ["anotherVideoId"],     
                 }
            
             </remarks>
             <response code="201">Returns the newly created item</response>
             <response code="400">If the item is null</response>       
        </member>
        <member name="M:back_end.Controllers.VideosController.DeleteVideoFromCategory(System.String,System.String)">
             <summary>
             delete a video from an exisiting category!
             Please note that the video list contains "youtube video ids"
             </summary>
             <remarks>
             Sample request:
            
                  /DeleteAllVideosFromCategory
                 {
                    "id": "62979eb0c19fd38c79cdb3b8",
                    "category": "Wildlife",
                    "videoList": ["anotherVideoId"],     
                 }
            
             </remarks>
             <response code="201">Returns the newly created item</response>
             <response code="400">If the item is null</response>       
        </member>
        <member name="M:back_end.Controllers.VideosController.DeleteVideosFromCategory(System.String,System.Collections.Generic.List{System.String})">
             <summary>
             delete multiple videos from an exisiting category!
             Please note that the video list contains "youtube video ids"
             </summary>
             <remarks>
             Sample request:
            
                  /DeleteAllVideosFromCategory
                 {
                    "id": "62979eb0c19fd38c79cdb3b8",
                    "category": "Wildlife",
                    "videoList": ["anotherVideoId"],     
                 }
            
             </remarks>
             <response code="201">Returns the newly created item</response>
             <response code="400">If the item is null</response>       
        </member>
    </members>
</doc>
